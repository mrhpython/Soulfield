const fs = require("fs"); const path = require("path");
const { askAiden } = require("./aiden.cjs");
const ROOT = path.resolve(__dirname, "..");
const RDIR = path.join(ROOT, "workspace", "research");
fs.mkdirSync(RDIR, { recursive: true });

function slug(s){ return String(s).toLowerCase().replace(/[^a-z0-9]+/g,"-").replace(/^-+|-+$/g,"").slice(0,80); }

(async () => {
  const topic = process.argv.slice(2).join(" ").trim();
  if (!topic) { console.error("usage: node tools/research.cjs \"topic\""); process.exit(1); }
  const id = `${Date.now()}-${slug(topic)}`;
  const dir = path.join(RDIR, id); fs.mkdirSync(dir, { recursive: true });

  const system = "You are Aiden, a strategist producing actionable market research. Output markdown plus a JSON block for keywords.";
  const user = `Topic: ${topic}
Produce files:
- research.md (audience, pains, 3–5 niches, top queries, angles)
- keywords.json (array of {keyword,intent,difficulty,volume_est} 10–25 items)
- competitors.md (3–7 players, edge, exploitable gaps)
- plan.md (7-day sprint: outputs, KPIs)`;

  const out = await askAiden({ system, messages:[{role:"user", content:user}] });

  // Save raw markdown as research.md
  fs.writeFileSync(path.join(dir, "research.md"), out);

  // Try to extract a JSON block for keywords.json
  let json = "[]";
  const m = out.match(/```json\s*([\s\S]*?)```/i) || out.match(/\[\s*{[\s\S]*}\s*\]/m);
  if (m) { try { json = JSON.stringify(JSON.parse(m[1]||m[0]), null, 2); } catch {} }
  fs.writeFileSync(path.join(dir, "keywords.json"), json);

  // Split optional sections
  const sect = name => {
    const re = new RegExp(`^##\\s*${name}\\s*$([\\s\\S]*?)(?=^##\\s|\\Z)`, "im");
    const mm = out.match(re); return mm && mm[1] ? mm[1].trim()+"\n" : null;
  };
  const q = { competitors: sect("competitors"), plan: sect("plan") };
  if (q.competitors) fs.writeFileSync(path.join(dir, "competitors.md"), q.competitors);
  if (q.plan) fs.writeFileSync(path.join(dir, "plan.md"), q.plan);

  console.log(dir);
})().catch(e => { console.error(e.stack||e); process.exit(1); });
